{"pages":[],"posts":[{"title":"2021年3月","text":"Spring深度理解，达到专家级别 MySQL深入掌握，索引优化什么的。 Redis深入理解掌握，这次重点放在客户端上。 方案设计与表达，相对于写代码，直观的方案设计能够让人很快的看到最后结果。 算法还是要耍起来，耍起来，耍起来。 环境部署什么，K8S还是要耍起来。 写代码的能力，还是要锻炼起来，如何写好业务代码，思考如何写代码。如何在工作中表现出更好的状态，可以很快的完成代码。 知识还是要聚焦，不能分散。当前阶段的工作很简单。 看完Docker相关的知识点。 – 验收成果就是 部署MySQL，出从模式。分析MySQL数据库的文件结果。 Docker验收成功还可以部署整套的Redis集群，尝试部署主从/哨兵/集群。 MySQL 知识点汇总和学习。在孩子出生前，看完MySQL相关的知识点–图书。 上班期间，想想如何写代码，如何能快速的完成业务的述求，完成业务要求。上班时间看看Spring官方代码库。 给自己一点压力。每天早上还是要老早起床，然后看些文章之类的。","link":"/2021/03/01/2021%E5%B9%B43%E6%9C%88/"},{"title":"Docker Swarm","text":"Swarm是啥？根据官网上的说明，Swarm是当前Docker版本一种原生的管理Docker引擎集群的模式。使用Docker CLI可以在swarm中部署应用、管理Swarm的行为。 Swarm概念的出现是为了”Scale your app”。 Docker Swarm 主要包含两方面内容：一个企业级的Docker安全集群，一个微服务应用编排引擎。 Swarm环境部署swarm是由一个或者多个Docker节点组成，这些节点需要通过可靠的网络相连。这就要求节点要安装Docker,第二要网络相通，以便swarm集群内通信。 节点(Node)类型 工作节点(WORKER):接收来自管理节点的任务并执行。 管理节点(MANAGER):负责集群控制面(Control Plane)。 环境准备 准备6个节点(物理服务器、虚拟机、树莓派、云实例)，包含3个管理节点和3个工作节点。 部署步骤 初始化 –&gt; 加入额外的管理节点 –&gt; 加入工作节点 123456789101112# swarm初始化，将节点切换为swarm模式docker swarm init --advertise-addr 10.0.0.1:2377 --listen-addr 10.0.0.1:2377# 列出Swarm中的节点docker node ls# 查询加入manager的token指令docker swarm join-token manager# 查询加入worker的token指令docker swarm join-token worker Swarm HA 特性Swarm使用了Raft共识算法来支持管理节点(Manager)的HA。 最佳实践原则： 部署奇数个管理节点，防止脑裂(Split-Brain) 假设有4个管理节点，当网络发生分区时，可能每个分区都有两个管理节点，每个分区都无法知道其余两个节点能否正常运行，无法得知分区是否掌握了大多数(Quorum)。集群虽然存在且在运行，但是无法变更配置、增加和管理应用负载。 不要部署太多管理节点（3、5），共识效率","link":"/2021/02/15/Docker-Swarm/"},{"title":"Docker引擎","text":"Dokcer引擎是用来运行和管理容器的核心组件。基于开放容器计划相关标准的要求，Docker引擎采用模块化的设计原则。当前Docker引擎是由Docker Client/Docker daemon/ containerd /runc组成。共同负责容器的创建和运行。 在发展过程中，为了更好的平台兼容性，使用Libcontainer代替LXC。摒弃大而全的daemon，拆开daemon功能分散到小的模块中。所有容器运行的代码都在一个单独的OCI兼容层中实现（runc）。 runc：run contianer ，实质上就是一个轻量级、针对Libcontainer进行包装的命令行交互工具。只有一个作用就是创建容器。 containerd：用来实现容器执行的所有逻辑，管理容器的生命周期，随后新增镜像管理的工作。 shim用来实现无daemon的容器的进程管理的工具。一旦容器创建完成，对应的runc进程就会退出，相关联的containerd-shim进程就会成为容器的父进程。 daemon的作用：主要包含镜像管理、镜像构建、REST API、身份验证、安全、核心网络以及编排。 通过将所有用于启动、管理容器的逻辑从daemon中删除，意味着与daemon与容器的解耦，可以被成为“无守护进程的容器”，因此对daemon的维护和升级不会影响到运行中的容器。","link":"/2021/03/02/Docker%E5%BC%95%E6%93%8E/"},{"title":"创建github博客工作流","text":"搭建博客说明 Hexo安装说明使用hexo构建博客前，首先要安装hexo相关支持组件。Hexo基础的支持环境就是NodeJS。 安装NodeJS 安装Hexo npm install -g hexo-cli1npm install -g hexo-cli 基础指令建站初始化12345678910111213$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install--------- 构建结果 ----------.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 常用指令123hexo new [layout] title # 新建文章hexo generate # 生成静态文件hexo server # 启动服务器 主题设置使用主题Icarus 下载主题到本地 1git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 配置_config.yml文件 1theme: icarus 配置_config_icarus.yml文件 1231. 移除google广告挂件2. 移除打赏、分享挂价3. 启用Gitalk作为评论仓库 Gitalk 创建OAuth Apps 创建评论仓库 配置comment_config_icarus.yml 中尤其要注意proxy配置,否则403. 1proxy: 'https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token' github账号的建立参考其他github账号申请与创建的步骤 github.io项目创建项目名称为lingodan.github.io,自行创建需要更换为自己的用户名； Travis-CI使用Travis完成持续集成设置。 使用Github账户登录Travis-CI网站https://travis-ci.com/ 在项目根路径下新建.travis.yml文件 12345678910111213141516171819202122232425sudo: falselanguage: node_jsnode_js: - 12 cache: npmbranches: only: - master # build master branch onlybefore_install:- export TZ='Asia/Shanghai'- npm install -g hexo-cli- npm installinstall:- npm installscript:- hexo clean- hexo generate # generate static filesdeploy: provider: pages skip-cleanup: true github-token: $GH_TOKEN # GH_TOKEN在github申请，在Travis页面配置 keep-history: true on: branch: master # 监控master分支变化 local-dir: public 申请Github Personal access tokens Travis 页面配置GH_TOKEN 以上完成Travis对于项目的配置。当Github项目更新时，Travis会收到任务，触发编译任务。","link":"/2021/02/14/%E5%88%9B%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E5%B7%A5%E4%BD%9C%E6%B5%81/"},{"title":"新年复工快乐","text":"Hello New Year. 换到新平台，来测试下日志输出。","link":"/2021/02/18/%E6%96%B0%E5%B9%B4%E5%A4%8D%E5%B7%A5%E5%BF%AB%E4%B9%90/"}],"tags":[{"name":"think","slug":"think","link":"/tags/think/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"工作笔记","slug":"工作笔记","link":"/tags/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"}],"categories":[{"name":"日志博客","slug":"日志博客","link":"/categories/%E6%97%A5%E5%BF%97%E5%8D%9A%E5%AE%A2/"}]}